
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id "java"
    id "io.freefair.lombok" version "6.2.0"
    id "de.undercouch.download" version "4.1.2"
    id "com.github.johnrengelman.shadow" version "7.1.0"
    id "jacoco"
    id "com.diffplug.spotless" version "6.2.2"
    id 'org.openapi.generator' version '5.4.0' apply false
}

spotless {
    encoding 'UTF-8'
    java {
        target '**/src/*/java/**/*.java'
        palantirJavaFormat()
        importOrder('','javax','java','\\#')
        removeUnusedImports()
    }
}

allprojects {
    group = 'one.block.b1x'
    version = '0.0.1'

    compileJava.dependsOn ':spotlessApply'
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url = uri('https://packages.confluent.io/maven/') }
        maven { url = uri('https://repo.maven.apache.org/maven2') }

        maven {
            url 'https://blockone.jfrog.io/artifactory/b1fs-b1x-java-utils-release'
            credentials {
                username System.getenv("ARTIFACTORY_JAVA_UTILS_USERNAME") ?: System.getenv("ARTIFACTORY_USERNAME") ?: "${ARTIFACTORY_USERNAME}"
                password System.getenv("ARTIFACTORY_JAVA_UTILS_PASSWORD") ?: System.getenv("ARTIFACTORY_PASSWORD") ?: "${ARTIFACTORY_PASSWORD}"
            }
        }

        maven {
            url 'https://blockone.jfrog.io/artifactory/b1fs-b1x-java-utils'
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME") ?: "${ARTIFACTORY_USERNAME}"
                password System.getenv("ARTIFACTORY_PASSWORD") ?: "${ARTIFACTORY_PASSWORD}"
            }
        }

        maven {
            url 'https://blockone.jfrog.io/artifactory/b1fs-algoteq-libs'
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME") ?: "${ARTIFACTORY_USERNAME}"
                password System.getenv("ARTIFACTORY_PASSWORD") ?: "${ARTIFACTORY_PASSWORD}"
            }
        }

        maven {
            url 'https://blockone.jfrog.io/artifactory/b1x-proto-common' // Common Protobuf Messages Location
            credentials {
                username System.getenv("ARTIFACTORY_USERNAME") ?: "${ARTIFACTORY_USERNAME}"
                password System.getenv("ARTIFACTORY_PASSWORD") ?: "${ARTIFACTORY_PASSWORD}"
            }
        }
    }

    task printGroup {
        doLast {
            println project.group
        }
    }
    task printVersion {
        doLast {
            println project.version
        }
    }
    task printApiClientRepositoryUrl {
        doLast {
            println apiClientRepositoryUrl
        }
    }

    ext.getVersion = { projectName ->
        def projectVersion = file(project(":${projectName}").projectDir.toString() + "/version.txt").text.trim()
        if (project.hasProperty('isBranchDeploy') && project.isBranchDeploy == 'true') {
            return "${projectVersion}-${project.commitId}"
        }
        return "${projectVersion}"
    }
}

ext {
    b1xUtilsVersion = '5.6.1'
    micronautVersion = '3.5.3'
    lombokVersion = '1.18.20'
    log4JVersion = '2.17.1'
    newRelicMicrometerVersion = '0.10.0'
    newRelicVersion = '7.9.0'
    sendgridVersion = '4.6.5'
    postgresqlVersion = '42.4.1'

    protobufGradleVersion = '0.8.13'
    protobufJavaVersion = '3.21.5'
    protoCVersion = '3.21.5'
    b1xProtoCommonVersion = '1.0.14'

    apiClients = b1xApiModules.split(',')
    apiClientRepositoryUrl = b1xMavenRepoJavaUtilsSnapshot
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "jacoco"

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    task downloadNewrelic(type: Download) {
        mkdir 'newrelic'
        src 'https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip'
        dest file('newrelic')
    }

    task unzipNewrelic(type: Copy) {
        from zipTree(file('newrelic/newrelic-java.zip'))
        into buildDir
    }

    if (!apiClients.contains(it.name)) {
        dependencies {

            // Lombok
            annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
            compileOnly "org.projectlombok:lombok:${lombokVersion}"
            testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

            // Micronaut
            implementation platform("io.micronaut:micronaut-bom") {
                version {
                    strictly "${micronautVersion}"
                }
                exclude group: 'org.postgresql', module: 'postgresql'
            }
            implementation "io.micronaut:micronaut-inject"
            implementation "io.micronaut:micronaut-validation"
            implementation "io.micronaut:micronaut-runtime"
            implementation "io.micronaut:micronaut-http-server-netty"
            implementation "io.micronaut:micronaut-http-client"
            implementation "io.micronaut:micronaut-http"
            implementation "io.micronaut:micronaut-management"
            implementation "io.micronaut.security:micronaut-security"
            implementation "io.micronaut.security:micronaut-security-jwt"
            implementation "io.micronaut.micrometer:micronaut-micrometer-core"
            implementation "io.micronaut.micrometer:micronaut-micrometer-registry-prometheus"
            implementation "io.micronaut.redis:micronaut-redis-lettuce"
            implementation 'io.micronaut.cache:micronaut-cache-caffeine'
            implementation "jakarta.annotation:jakarta.annotation-api"

            annotationProcessor platform("io.micronaut:micronaut-bom") {
                version {
                    strictly "${micronautVersion}"
                }
            }
            annotationProcessor "io.micronaut:micronaut-inject-java"
            annotationProcessor "io.micronaut:micronaut-validation"
            annotationProcessor "io.micronaut.data:micronaut-data-processor"
            annotationProcessor "io.micronaut.openapi:micronaut-openapi"
            annotationProcessor "io.micronaut.security:micronaut-security-annotations"

            testAnnotationProcessor platform("io.micronaut:micronaut-bom") {
                version {
                    strictly "${micronautVersion}"
                }
            }

            testAnnotationProcessor "io.micronaut:micronaut-inject-java"
            testAnnotationProcessor "io.micronaut:micronaut-validation"
            testAnnotationProcessor "io.micronaut.data:micronaut-data-processor"
            testAnnotationProcessor "io.micronaut.openapi:micronaut-openapi"
            testImplementation "io.micronaut.test:micronaut-test-junit5"

            compileOnly platform("io.micronaut:micronaut-bom") {
                version {
                    strictly "${micronautVersion}"
                }
            }

            // Database / JPA + Hibernate
            compileOnly "io.micronaut.data:micronaut-data-hibernate-jpa"
            compileOnly "io.micronaut.sql:micronaut-jdbc-tomcat"
            compileOnly("io.micronaut.sql:micronaut-hibernate-jpa") {
                exclude group: 'io.micronaut.sql', module: 'micronaut-hibernate-jpa-spring'
            }

            // Block one
            implementation "one.block.b1x:common-utils:${b1xUtilsVersion}"
            implementation "one.block.b1x:eosio-utils:${b1xUtilsVersion}"
            implementation "one.block.b1x:security-utils:${b1xUtilsVersion}"
            implementation "one.block.b1x:event-utils:${b1xUtilsVersion}"
            implementation "one.block.b1x:abi-models:${b1xUtilsVersion}"
            implementation "one.block.b1x:rabbitmq-utils:${b1xUtilsVersion}"
            implementation "one.block.b1x:identifiers:${b1xUtilsVersion}"
            implementation "one.block.b1x:document-storage-utils:${b1xUtilsVersion}"
            implementation "one.block.b1x:query-utils:${b1xUtilsVersion}"
            testImplementation "one.block.b1x:common-utils:${b1xUtilsVersion}:tests"
            testImplementation "one.block.b1x:eosio-utils:${b1xUtilsVersion}:tests"
            testImplementation "one.block.b1x:security-utils:${b1xUtilsVersion}:tests"
            testImplementation "one.block.b1x:event-utils:${b1xUtilsVersion}:tests"
            testImplementation "one.block.b1x:abi-models:${b1xUtilsVersion}:tests"

            // New Relic
            compileOnly "com.newrelic.agent.java:newrelic-java:${newRelicVersion}"
            implementation "com.newrelic.agent.java:newrelic-api:${newRelicVersion}"
            implementation "com.newrelic.telemetry:micrometer-registry-new-relic:${newRelicMicrometerVersion}"

            // Log4j
            implementation "org.apache.logging.log4j:log4j-api:${log4JVersion}"
            implementation "org.apache.logging.log4j:log4j-core:${log4JVersion}"
            implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4JVersion}"

            // Apache
            implementation "org.apache.commons:commons-lang3:3.9"
            implementation "org.apache.httpcomponents.client5:httpclient5:5.1.3"

            // Others
            implementation 'com.neovisionaries:nv-i18n:1.27'
            implementation 'org.dom4j:dom4j:2.1.3'
            implementation 'javax.annotation:javax.annotation-api'
            implementation 'com.nimbusds:nimbus-jose-jwt:9.21.1'
            implementation 'commons-io:commons-io:2.7'
            implementation "io.swagger.core.v3:swagger-annotations:2.2.0"
            implementation 'com.google.guava:guava:31.1-jre'
            implementation 'org.bouncycastle:bcprov-jdk15on:1.70'
            implementation "com.google.protobuf:protobuf-java:${protobufJavaVersion}"

            testImplementation 'com.squareup.okhttp3:okhttp:4.7.2'
            testImplementation "org.mockito:mockito-core:3.3.0"
            testImplementation "org.hamcrest:hamcrest:2.2"
            testImplementation "org.skyscreamer:jsonassert:1.5.0"
            testImplementation "org.awaitility:awaitility:3.0.0"
            testImplementation "org.mockito:mockito-junit-jupiter:2.22.0"
            testImplementation "org.junit.jupiter:junit-jupiter-engine:5.1.0"
            testImplementation "org.junit.jupiter:junit-jupiter-params"
            testImplementation ('com.github.database-rider:rider-junit5:1.33.0') {
                exclude group: 'org.postgresql', module: 'postgresql'
            }
            testImplementation 'com.google.code.gson:gson:2.8.9'

            // Test Containers
            testImplementation platform("org.testcontainers:testcontainers-bom:1.17.3")
            testImplementation 'org.testcontainers:testcontainers'
            testImplementation 'org.testcontainers:junit-jupiter'
        }
    }

    if (apiClients.contains((it.name + "-client"))) {
        compileJava.doFirst {
            new File("${project.projectDir}/openapi.properties").withWriter { w ->
                Properties p = new Properties()
                p['micronaut.openapi.expand.title'] = project.name
                p['micronaut.openapi.expand.version'] = project.version.toString()
                p.store w, null
            }
        }
        processTestResources.doLast {
            new File("${buildDir}/resources/test/openapi.properties").withWriter { w ->
                Properties p = new Properties()
                p['title'] = project.name
                p['version'] = project.version.toString()
                p.store w, null
            }
        }

        task createInternalSwaggerSpecs() {
            description = "Takes the default swagger api specs file and generates a new swagger api specs only with the internal tagged apis/endpoints"
            doLast {
                exec {
                    commandLine "java",
                            "-classpath", sourceSets.main.runtimeClasspath.getAsPath(),
                            "one.block.b1x.common.swagger.SwaggerSpecsGenerator",
                            "${project.rootDir}/${project.name}/build/classes/java/main/META-INF/swagger",
                            "${project.name}",
                            "${project.version}",
                            "internal"
                }
            }
        }

        task buildApiClient(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
            def projectVersion = getVersion(project.name)
            verbose = false
            generatorName = "java"
            inputSpec = "${project.rootDir}/${project.name}/build/classes/java/main/META-INF/swagger/${project.name}-internal-${projectVersion}.yml"
            outputDir = "${project.rootDir}/${project.name}-client"
            enablePostProcessFile = true

            //For the initial generation (https://github.com/OpenAPITools/openapi-generator/blob/master/docs/customization.md#ignore-file-format)
            //ignoreFileOverride = "$rootDir/registration-service/init-openapi-generator-ignore"

            globalProperties = [
                    "apiTests": "false",
                    "modelTests": "false",
                    "apiDocs": "false",
                    "modelDocs": "false"
            ]
            configOptions = [
                    "groupId": "com.bullish.client",
                    "artifactId": "${project.name}-client",
                    "artifactVersion": "${projectVersion}",

                    "library": "native",
                    "dateLibrary": "java8",

                    "hideGenerationTimestamp": "true",
                    "sourceFolder": "src/generated/java",
                    "invokerPackage": "com.bullish.${project.name.replace("-", "")}client",
                    "apiPackage": "com.bullish.${project.name.replace("-", "")}client.apis",
                    "modelPackage": "com.bullish.${project.name.replace("-", "")}client.models",
            ]
        }
    }

    configurations.implementation {
        exclude group: "com.fasterxml.jackson.module", module: "jackson-module-blackbird"
    }

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.fork = true
        options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=swagger-ui.enabled=true,swagger-ui.theme=flattop'
    }

    tasks.withType(AbstractArchiveTask).configureEach {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    shadowJar {
        zip64 true
        mergeServiceFiles()
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco/html")
        }
    }
}

def allTestCoverageFile = "build/jacoco/allTestCoverage.exec"

task jacocoMergeTest(type: JacocoMerge) {
    destinationFile = file(allTestCoverageFile)
    executionData = project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn jacocoMergeTest

    reports {
        xml.required.set true
        xml.outputLocation.set file("build/jacoco/allTestCoverage.xml")
        html.required.set true
        html.outputLocation.set file("build/jacoco/allTestCoverage/html")
    }

    def classes = []
    def sources = []

    subprojects.each {
        classes.push(fileTree(dir: "${it.name}/build/classes/java/main"))
        sources.push("${it.name}/src/main/java")
    }

    sourceDirectories.setFrom(files(sources))
    classDirectories.setFrom(files(classes))
    executionData.setFrom(project.fileTree(dir: '.', include: allTestCoverageFile))
}

task updateSonarProjectProperties(dependsOn: build) {
    def sourceFile = "sonar-project.properties"
    def tmpFile = "sonar-project.tmp"
    ant.copy(file: sourceFile, tofile: tmpFile)
    ant.propertyfile(file: tmpFile) {
        entry( key: "sonar.modules", value: subprojects.collect{"${it.name}"}.join(","))
    }
    ant.copy(file: tmpFile, tofile: sourceFile) {
        filterchain { headfilter(lines: "-1", skip: "1")}
    }
    ant.delete(file: tmpFile)
}

task printApiClients {
    doLast {
        println apiClients
    }
}


